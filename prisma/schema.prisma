// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id              Int               @id @default(autoincrement())
  fullName        String
  email           String            @unique
  password        String?
  noTelp          String?
  city            String?
  country         String?
  profilePicture  String?
  fileId          String?
  isActivated     Boolean           @default(false)
  isAdmin         Boolean           @default(false)
  googleId        String?
  notification    Notifications[]
  transactions    Transactions[]
  activationCodes ActivationCodes[]
  resetCodes      ResetCodes[]
}

model ActivationCodes {
  id             Int      @id @default(autoincrement())
  userId         Int      @unique
  activationCode String
  createdAt      DateTime @default(now())
  users          Users    @relation(fields: [userId], references: [id])
}

model ResetCodes {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  resetCode String
  createdAt DateTime @default(now())
  users     Users    @relation(fields: [userId], references: [id])
}

model Notifications {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  deskripsi String?
  dateTime  DateTime @default(now())
  userId    Int
  users     Users    @relation(fields: [userId], references: [id])
}

model Level {
  id        Int     @id @default(autoincrement())
  levelName String
  class     Class[]
}

model Categorys {
  id           Int                 @id @default(autoincrement())
  categoryName String
  class        CategoriesOnClass[]
}

model CategoriesOnClass {
  classCode  String
  categoryId Int
  categorys  Categorys @relation(fields: [categoryId], references: [id])
  class      Class     @relation(fields: [classCode], references: [classCode])

  @@id([classCode, categoryId])
}

model Class {
  classCode    String              @unique
  className    String
  description  String
  price        Decimal
  typeId       Int
  levelId      Int
  isFree       Boolean
  level        Level               @relation(fields: [levelId], references: [id])
  lessons      Lessons[]
  categorys    CategoriesOnClass[]
  transactions Transactions[]
}

model Lessons {
  id                   Int    @id @default(autoincrement())
  learningMaterial     String
  linkLearningMaterial String
  chapter              Int
  classCode            String
  class                Class  @relation(fields: [classCode], references: [classCode])
}

model Transactions {
  id            Int      @id @default(autoincrement())
  status        Boolean  @default(false)
  paymentMethod String
  paymentDate   DateTime
  userId        Int
  classCode     String
  users         Users    @relation(fields: [userId], references: [id])
  class         Class    @relation(fields: [classCode], references: [classCode])
}
